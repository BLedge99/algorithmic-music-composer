# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'manUI11.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import re
import sys

import pygame
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QMessageBox, QFileDialog
from Analyse import generate_sigs, generate_song, save_song
from helpForm import help_Dialog
from warningUI import Ui_Warning


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.choice = 1
        self.midi_files = {}
        self.generated_songs = []
        self.counter = 0
        self.threshold = 5
        self.benchmark = 10
        self.pattern_length = 16
        self.signature_length = 0
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(979, 400)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setObjectName("groupBox")
        self.layoutWidget_3 = QtWidgets.QWidget(self.groupBox)
        self.layoutWidget_3.setGeometry(QtCore.QRect(20, 20, 281, 241))
        self.layoutWidget_3.setObjectName("layoutWidget_3")
        self.inputLayout = QtWidgets.QGridLayout(self.layoutWidget_3)
        self.inputLayout.setContentsMargins(0, 0, 0, 0)
        self.inputLayout.setObjectName("inputLayout")
        self.inputLoad = QtWidgets.QPushButton(self.layoutWidget_3)
        self.inputLoad.setObjectName("inputLoad")
        self.inputLayout.addWidget(self.inputLoad, 2, 0, 1, 1)
        self.inputArtist = QtWidgets.QLineEdit(self.layoutWidget_3)
        self.inputArtist.setObjectName("inputArtist")
        self.inputLayout.addWidget(self.inputArtist, 0, 1, 1, 2)
        self.inputArtistLabel = QtWidgets.QLabel(self.layoutWidget_3)
        self.inputArtistLabel.setObjectName("inputArtistLabel")
        self.inputLayout.addWidget(self.inputArtistLabel, 0, 0, 1, 1)
        self.inputList = QtWidgets.QListWidget(self.layoutWidget_3)
        self.inputList.setObjectName("inputList")
        self.inputLayout.addWidget(self.inputList, 1, 0, 1, 3)
        self.inputPlay = QtWidgets.QPushButton(self.layoutWidget_3)
        self.inputPlay.setObjectName("inputPlay")
        self.inputLayout.addWidget(self.inputPlay, 2, 2, 1, 1)
        self.horizontalLayout.addWidget(self.groupBox)
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setObjectName("groupBox_2")
        self.parametersBox = QtWidgets.QGroupBox(self.groupBox_2)
        self.parametersBox.setGeometry(QtCore.QRect(10, 120, 301, 161))
        self.parametersBox.setObjectName("parametersBox")
        self.layoutWidget = QtWidgets.QWidget(self.parametersBox)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 20, 281, 121))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.sliderSettingsLayout = QtWidgets.QVBoxLayout()
        self.sliderSettingsLayout.setObjectName("sliderSettingsLayout")
        self.sliderLabelsLayout = QtWidgets.QHBoxLayout()
        self.sliderLabelsLayout.setContentsMargins(15, -1, 15, 10)
        self.sliderLabelsLayout.setSpacing(16)
        self.sliderLabelsLayout.setObjectName("sliderLabelsLayout")
        self.thresholdLabel = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(7)
        self.thresholdLabel.setFont(font)
        self.thresholdLabel.setObjectName("thresholdLabel")
        self.sliderLabelsLayout.addWidget(self.thresholdLabel)
        self.benchmarkLa = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(7)
        self.benchmarkLa.setFont(font)
        self.benchmarkLa.setObjectName("benchmarkLa")
        self.sliderLabelsLayout.addWidget(self.benchmarkLa)
        self.noteLengthLabel = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(7)
        self.noteLengthLabel.setFont(font)
        self.noteLengthLabel.setObjectName("noteLengthLabel")
        self.sliderLabelsLayout.addWidget(self.noteLengthLabel)
        self.sliderSettingsLayout.addLayout(self.sliderLabelsLayout)
        self.slidertLayout = QtWidgets.QHBoxLayout()
        self.slidertLayout.setObjectName("slidertLayout")
        self.thresholdSlider = QtWidgets.QSlider(self.layoutWidget)
        self.thresholdSlider.setMaximum(100)
        self.thresholdSlider.setOrientation(QtCore.Qt.Vertical)
        self.thresholdSlider.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.thresholdSlider.setTickInterval(10)
        self.thresholdSlider.setObjectName("thresholdSlider")
        self.slidertLayout.addWidget(self.thresholdSlider)
        self.benchmarkSlider = QtWidgets.QSlider(self.layoutWidget)
        self.benchmarkSlider.setMaximum(100)
        self.benchmarkSlider.setOrientation(QtCore.Qt.Vertical)
        self.benchmarkSlider.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.benchmarkSlider.setTickInterval(10)
        self.benchmarkSlider.setObjectName("benchmarkSlider")
        self.slidertLayout.addWidget(self.benchmarkSlider)
        self.patternLengthSlider = QtWidgets.QSlider(self.layoutWidget)
        self.patternLengthSlider.setMaximum(100)
        self.patternLengthSlider.setOrientation(QtCore.Qt.Vertical)
        self.patternLengthSlider.setTickPosition(QtWidgets.QSlider.TicksBothSides)
        self.patternLengthSlider.setTickInterval(10)
        self.patternLengthSlider.setObjectName("patternLengthSlider")
        self.slidertLayout.addWidget(self.patternLengthSlider)
        self.sliderSettingsLayout.addLayout(self.slidertLayout)
        self.verticalLayout_3.addLayout(self.sliderSettingsLayout)
        self.sliderValuesLayout = QtWidgets.QHBoxLayout()
        self.sliderValuesLayout.setContentsMargins(40, -1, 40, -1)
        self.sliderValuesLayout.setSpacing(40)
        self.sliderValuesLayout.setObjectName("sliderValuesLayout")
        self.thresholdEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.thresholdEdit.setObjectName("thresholdEdit")
        self.sliderValuesLayout.addWidget(self.thresholdEdit)
        self.benchmarkEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.benchmarkEdit.setObjectName("benchmarkEdit")
        self.sliderValuesLayout.addWidget(self.benchmarkEdit)
        self.patternEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.patternEdit.setObjectName("patternEdit")
        self.sliderValuesLayout.addWidget(self.patternEdit)
        self.verticalLayout_3.addLayout(self.sliderValuesLayout)
        self.signatureBox = QtWidgets.QGroupBox(self.groupBox_2)
        self.signatureBox.setGeometry(QtCore.QRect(10, 20, 301, 101))
        self.signatureBox.setObjectName("signatureBox")
        self.layoutWidget_2 = QtWidgets.QWidget(self.signatureBox)
        self.layoutWidget_2.setGeometry(QtCore.QRect(10, 20, 285, 62))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.signatureLayout = QtWidgets.QVBoxLayout(self.layoutWidget_2)
        self.signatureLayout.setContentsMargins(0, 0, 0, 0)
        self.signatureLayout.setObjectName("signatureLayout")
        self.sigButtonLayout = QtWidgets.QHBoxLayout()
        self.sigButtonLayout.setContentsMargins(-1, 0, -1, 10)
        self.sigButtonLayout.setSpacing(55)
        self.sigButtonLayout.setObjectName("sigButtonLayout")
        self.sigButton2 = QtWidgets.QRadioButton(self.layoutWidget_2)
        self.sigButton2.setObjectName("sigButton2")
        self.sigButtonLayout.addWidget(self.sigButton2)
        self.sigButton3 = QtWidgets.QRadioButton(self.layoutWidget_2)
        self.sigButton3.setObjectName("sigButton3")
        self.sigButtonLayout.addWidget(self.sigButton3)
        self.sigButton4 = QtWidgets.QRadioButton(self.layoutWidget_2)
        self.sigButton4.setObjectName("sigButton4")
        self.sigButtonLayout.addWidget(self.sigButton4)
        self.sigButton5 = QtWidgets.QRadioButton(self.layoutWidget_2)
        self.sigButton5.setObjectName("sigButton5")
        self.sigButtonLayout.addWidget(self.sigButton5)
        self.signatureLayout.addLayout(self.sigButtonLayout)
        self.horizontalLayout.addWidget(self.groupBox_2)
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setObjectName("groupBox_3")
        self.layoutWidget_5 = QtWidgets.QWidget(self.groupBox_3)
        self.layoutWidget_5.setGeometry(QtCore.QRect(10, 20, 291, 241))
        self.layoutWidget_5.setObjectName("layoutWidget_5")
        self.outputLayout_2 = QtWidgets.QGridLayout(self.layoutWidget_5)
        self.outputLayout_2.setContentsMargins(0, 0, 0, 0)
        self.outputLayout_2.setObjectName("outputLayout_2")
        self.outputSave_2 = QtWidgets.QPushButton(self.layoutWidget_5)
        self.outputSave_2.setObjectName("outputSave_2")
        self.outputLayout_2.addWidget(self.outputSave_2, 3, 0, 1, 1)
        self.structureLabel_2 = QtWidgets.QLabel(self.layoutWidget_5)
        self.structureLabel_2.setObjectName("structureLabel_2")
        self.outputLayout_2.addWidget(self.structureLabel_2, 1, 0, 1, 1)
        self.generateButton_2 = QtWidgets.QPushButton(self.layoutWidget_5)
        self.generateButton_2.setObjectName("generateButton_2")
        self.outputLayout_2.addWidget(self.generateButton_2, 3, 1, 1, 1)
        self.keyLineEdit_2 = QtWidgets.QLineEdit(self.layoutWidget_5)
        self.keyLineEdit_2.setObjectName("keyLineEdit_2")
        self.outputLayout_2.addWidget(self.keyLineEdit_2, 0, 1, 1, 2)
        self.structureLineEdit_2 = QtWidgets.QLineEdit(self.layoutWidget_5)
        self.structureLineEdit_2.setObjectName("structureLineEdit_2")
        self.outputLayout_2.addWidget(self.structureLineEdit_2, 1, 1, 1, 2)
        self.outputPlay_2 = QtWidgets.QPushButton(self.layoutWidget_5)
        self.outputPlay_2.setObjectName("outputPlay_2")
        self.outputLayout_2.addWidget(self.outputPlay_2, 3, 2, 1, 1)
        self.outputList_2 = QtWidgets.QListWidget(self.layoutWidget_5)
        self.outputList_2.setObjectName("outputList_2")
        self.outputLayout_2.addWidget(self.outputList_2, 2, 0, 1, 3)
        self.keySignatureLabel_2 = QtWidgets.QLabel(self.layoutWidget_5)
        self.keySignatureLabel_2.setObjectName("keySignatureLabel_2")
        self.outputLayout_2.addWidget(self.keySignatureLabel_2, 0, 0, 1, 1)
        self.horizontalLayout.addWidget(self.groupBox_3)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.gridLayout_2.addLayout(self.verticalLayout, 1, 0, 1, 1)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setHorizontalSpacing(0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout_4.addWidget(self.label, 0, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setMaximumSize(QtCore.QSize(150, 16777215))
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_4.addWidget(self.pushButton, 0, 1, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout_4, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 979, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Algorithmic Music Composer"))
        self.groupBox.setTitle(_translate("MainWindow", "Input"))
        self.inputLoad.setText(_translate("MainWindow", "Load"))
        self.inputArtist.setText(_translate("MainWindow", "untitled"))
        self.inputArtistLabel.setText(_translate("MainWindow", "Artist Name:"))
        self.inputPlay.setText(_translate("MainWindow", "Play"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Generation"))
        self.parametersBox.setTitle(_translate("MainWindow", "Parameters"))
        self.thresholdLabel.setText(_translate("MainWindow", "Threshold"))
        self.benchmarkLa.setText(_translate("MainWindow", "Benchmark"))
        self.noteLengthLabel.setText(_translate("MainWindow", "Pattern Length"))
        self.thresholdEdit.setText(_translate("MainWindow", "0"))
        self.benchmarkEdit.setText(_translate("MainWindow", "0"))
        self.patternEdit.setText(_translate("MainWindow", "0"))
        self.signatureBox.setTitle(_translate("MainWindow", "Signature Length"))
        self.sigButton2.setText(_translate("MainWindow", "2"))
        self.sigButton3.setText(_translate("MainWindow", "3"))
        self.sigButton4.setText(_translate("MainWindow", "4"))
        self.sigButton5.setText(_translate("MainWindow", "5"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Output"))
        self.outputSave_2.setText(_translate("MainWindow", "Save"))
        self.structureLabel_2.setText(_translate("MainWindow", "Structure"))
        self.generateButton_2.setText(_translate("MainWindow", "Generate"))
        self.outputPlay_2.setText(_translate("MainWindow", "Play"))
        self.keySignatureLabel_2.setText(_translate("MainWindow", "Key Signature"))
        self.label.setText(_translate("MainWindow", "Algorithmic Music Composer"))
        self.pushButton.setText(_translate("MainWindow", "?"))


        self.inputPlay.clicked.connect(self.play_clicked)
        self.inputLoad.clicked.connect(self.load_clicked)
        self.sigButton2.clicked.connect(self.signature_length_change_2)
        self.sigButton3.clicked.connect(self.signature_length_change_3)
        self.sigButton4.clicked.connect(self.signature_length_change_4)
        self.sigButton5.clicked.connect(self.signature_length_change_5)
        self.thresholdEdit.editingFinished.connect(self.threshold_box_change)
        self.benchmarkEdit.editingFinished.connect(self.benchmark_box_change)
        self.patternEdit.editingFinished.connect(self.pattern_length_box_change)
        self.thresholdSlider.valueChanged.connect(self.threshold_slider_change)
        self.benchmarkSlider.valueChanged.connect(self.benchmark_slider_change)
        self.patternLengthSlider.valueChanged.connect(self.pattern_length_slider_change)
        self.generateButton_2.clicked.connect(self.generate_clicked)
        self.outputSave_2.clicked.connect(self.save_clicked)
        self.pushButton.clicked.connect(self.help_clicked)
        self.outputPlay_2.clicked.connect(self.output_play_clicked)

        self.thresholdSlider.setValue(20)
        self.benchmarkSlider.setValue(60)
        self.patternLengthSlider.setValue(16)
        self.sigButton2.click()
        self.keyLineEdit_2.setText("C")
        self.structureLineEdit_2.setText("ABABCA")
        self.show()
        #self.test_setup()

    def play_clicked(self):
        #self.show_warn()
        if self.choice == 1:
            player = MidiPlayer(volume=1)
            midi_name = self.inputList.currentItem().text()
            midi_path = self.midi_files[midi_name]
            try:
                player.play_file(midi_path)
            except KeyboardInterrupt:  # link to a GUI stop button :)
                # if user hits Ctrl/C then exit
                # (works only in console mode)                pygame.mixer.music.fadeout(1000)
                pygame.mixer.music.stop()
                raise SystemExit

    def output_play_clicked(self):
        #self.show_warn()
        if self.choice == 1:
            player = MidiPlayer(volume=1)
            midi_name = self.outputList_2.currentItem().text()
            for song in self.generated_songs:
                if song[0] == midi_name:
                    midi_file = song[1]
                    midi_file.save("music/temp_song.mid")
            try:
                player.play_file("music/temp_song.mid")
            except KeyboardInterrupt:  # link to a GUI stop button :)
                # if user hits Ctrl/C then exit
                # (works only in console mode)                pygame.mixer.music.fadeout(1000)
                pygame.mixer.music.stop()
                raise SystemExit
            os.remove("music/temp_song.mid")

    def save_clicked(self):
        song_name = self.outputList_2.currentItem().text()
        for song in self.generated_songs:
            if song[0] == song_name:
                midi_file = song[1]
                print(song[0])
                file_path = QFileDialog.getSaveFileName(caption='Save As', filter='*.mid')
                save_song(midi_file, file_path)

    def load_clicked(self):
        openMidi = QFileDialog()
        midi_names = openMidi.getOpenFileNames(self, 'Open File(s)')
        for midi_name in midi_names[0]:
            print(midi_name)
            ext = re.search(".mid$", midi_name)
            if ext:
                self.addToList(midi_name)
            else:
                self.show_load_dialog(midi_name)

    def generate_clicked(self):
        file_name = self.addToOutputList()
        midi_list = []
        for x in range(self.inputList.count()):
            midi_list.append(self.midi_files[self.inputList.item(x).text()])
        pattern_length = self.patternLengthSlider.value()
        sig_length = self.signature_length
        threshold = self.thresholdSlider.value()
        benchmark = self.benchmarkSlider.value()
        key = str(self.keyLineEdit_2.text())
        structure = str(self.structureLineEdit_2.text())
        sigs = generate_sigs(midi_list, sig_length * pattern_length, threshold, benchmark)
        song = generate_song(sigs, key, structure)
        self.generated_songs.append((file_name,song))

    def help_clicked(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = help_Dialog()
        self.ui.helpUI(self.window)
        self.window.show()

    def show_warn(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_Warning()
        self.ui.warnUi(self.window)
        self.ui.playButton.connect(self.yes_play)
        self.ui.cancelButton.connect(self.yes_play)
        self.window.show()

    def yes_play(self):
        self.choice = 1

    def no_play(self):
        self.choice = 0

    def threshold_box_change(self):
        threshold = int(self.thresholdEdit.text())
        self.thresholdSlider.setValue(threshold)
        self.threshold = threshold

    def benchmark_box_change(self):
        benchmark = int(self.benchmarkEdit.text())
        self.benchmarkSlider.setValue(benchmark)
        self.benchmark = benchmark

    def pattern_length_box_change(self):
        pattern_length = int(self.patternEdit.text())
        self.patternLengthSlider.setValue(pattern_length)
        self.pattern_length = pattern_length

    def threshold_slider_change(self):
        threshold = self.thresholdSlider.value()
        self.threshold = threshold
        threshold = str(threshold)
        self.thresholdEdit.setText(threshold)

    def benchmark_slider_change(self):
        benchmark = self.benchmarkSlider.value()
        self.benchmark = benchmark
        benchmark = str(benchmark)
        self.benchmarkEdit.setText(benchmark)

    def pattern_length_slider_change(self):
        pattern_length = self.patternLengthSlider.value()
        self.pattern_length = pattern_length
        pattern_length = str(pattern_length)
        self.patternEdit.setText(pattern_length)

    def signature_length_change_2(self):
        self.signature_length = int(self.sigButton2.text())

    def signature_length_change_3(self):
        self.signature_length = int(self.sigButton3.text())

    def signature_length_change_4(self):
        self.signature_length = int(self.sigButton4.text())

    def signature_length_change_5(self):
        self.signature_length = int(self.sigButton5.text())

    def show_load_dialog(self,name):
        err = QMessageBox()
        err.setWindowTitle("File Error!")
        err.setText("Wrong file format!")
        err.setInformativeText("Please choose a midi (.mid) file(s) to load")
        err.setIcon(QMessageBox.warning())
        err.setDetailedText(str(name[0]) + "is not of .mid file format")
        err.setStandardButtons(QMessageBox.Ok)
        err.exec()

    def save_midi(self, midi_file, file_path):
        midi_file.save(file_path)

    def addToList(self, midi_file):
        file_name = os.path.basename(midi_file)
        file_path = midi_file
        midi_item = (file_path, file_name)
        self.inputList.addItem(file_name)
        self.storeMidi(midi_item)

    def addToOutputList(self):
        file_name = self.inputArtist.text()
        file_name = re.sub(" ", "-", file_name)
        self.counter += 1
        file_name += "-" + str(self.counter)
        self.outputList_2.addItem(file_name)
        return file_name

    def storeMidi(self, midi_item):
        if self.midi_files.get(midi_item[1],"Hello") == "Hello":
            self.midi_files[midi_item[1]] = midi_item[0]

    def test_setup(self):
        midi_1 = ["C:\MIDI FOR DISS\Chopin. Frederic - Opus 28 No.3 - Prelude___WWW.MIDISFREE.COM.mid", "Chopin. Frederic - Opus 28 No.3 - Prelude___WWW.MIDISFREE.COM.mid"]
        midi_2 = ["C:\MIDI FOR DISS\Chopin. Frederic - Prelude No.15 In D Flat Major (Raindrop Prelude)___WWW.MIDISFREE.COM.mid", "Chopin. Frederic - Prelude No.15 In D Flat Major (Raindrop Prelude)___WWW.MIDISFREE.COM.mid"]
        self.addToList(midi_1)
        self.addToList(midi_2)


class MyMainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MyMainWindow, self).__init__(parent)
        self.setupUi(self)


class MidiPlayer:

    def __init__(self, freq=48000, bitsize=-16, channels=2, buffer=51, volume=0.5):
        self.freq = freq
        self.bitsize = bitsize
        self.channels = channels
        self.buffer = buffer
        self.volume = volume
        pygame.mixer.init(self.freq, self.bitsize, self.channels, self.buffer)
        pygame.mixer.music.set_volume(self.volume)

    def play_file(self, midi_path):
        clock = pygame.time.Clock()
        try:
            pygame.mixer.music.load(midi_path)
            print("Music file %s loaded!" % midi_path)
        except pygame.error:
            print("File %s not found! (%s)" % (midi_path, pygame.get_error()))
            return
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            # check if playback has finished
            clock.tick(30)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    palette = QtGui.QPalette()
    palette.setColor(QtGui.QPalette.Window, QtGui.QColor(53, 53, 53))
    palette.setColor(QtGui.QPalette.WindowText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Base, QtGui.QColor(15, 15, 15))
    palette.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53, 53, 53))
    palette.setColor(QtGui.QPalette.ToolTipBase, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.ToolTipText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Text, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Button, QtGui.QColor(53, 53, 53))
    palette.setColor(QtGui.QPalette.ButtonText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.BrightText, QtCore.Qt.red)
    palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(142, 45, 197).lighter())
    palette.setColor(QtGui.QPalette.HighlightedText, QtCore.Qt.black)
    app.setPalette(palette)
    window = MyMainWindow()
    sys.exit(app.exec_())
